name: Test

on:
  push:
    branches: [ main, develop, public-main ]
  pull_request:
    branches: [ main, develop, public-main ]

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.12']

    steps:
    - name: Check out repository
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root

    - name: Install project
      run: poetry install --no-interaction

    - name: Run unit tests
      run: poetry run pytest tests/naylence/ -v --tb=short

    - name: Run linting
      run: |
        poetry run ruff check .

    - name: Build package (test)
      run: poetry build

  integration-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.12']

    steps:
    - name: Check out repository
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root

    - name: Install project
      run: poetry install --no-interaction

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Verify Docker and Docker Compose
      run: |
        docker version
        docker compose version
        docker info

    - name: Pre-build integration test Docker images
      run: |
        # Build the main integration test image
        docker build -f tests/integration/docker/Dockerfile -t naylence-integration-test .
        
        # Pull OpenTelemetry collector image for telemetry tests
        docker pull otel/opentelemetry-collector-contrib:latest

    - name: Run integration tests
      run: |
        # Run integration tests in separate groups to avoid docker-compose conflicts
        echo "üß™ Running non-Docker integration tests..."
        poetry run pytest tests/integration/test_*.py -v -s --tb=short --no-cov
        
        echo "üê≥ Running RPC integration tests..."
        poetry run pytest tests/integration/sentinel/ -v -s --tb=short --no-cov
        
        echo "üìä Running telemetry integration tests..."
        poetry run pytest tests/integration/telemetry/ -v -s --tb=short --no-cov
        
        echo "üîí Running security integration tests..."
        poetry run pytest tests/integration/security/ -v -s --tb=short --no-cov
      env:
        # Enable Docker support for integration tests
        DOCKER_BUILDKIT: 1
        COMPOSE_DOCKER_CLI_BUILD: 1
        # Control integration test Docker behavior
        PYTEST_DOCKER_REBUILD: false
        PYTEST_DOCKER_LOGS: true
