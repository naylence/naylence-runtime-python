name: Publish to PyPI

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      target:
        description: 'Target repository'
        required: true
        default: 'testpypi'
        type: choice
        options: [testpypi, pypi]

permissions:
  contents: read
  id-token: write   # required for OIDC uploads

jobs:
  # Build once and upload where needed
  build:
    runs-on: ubuntu-latest
    outputs:
      dist-path: ${{ steps.set-dist.outputs.path }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Poetry
        run: pipx install poetry

      - name: Install deps and package
        run: poetry install --no-interaction

      - name: Run tests
        run: poetry run pytest

      - name: Build dists
        run: poetry build

      - name: Expose dist path
        id: set-dist
        run: echo "path=dist" >> "$GITHUB_OUTPUT"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/*

  publish-testpypi:
    # Run via dispatch when target == testpypi
    if: github.event_name == 'workflow_dispatch' && inputs.target == 'testpypi'
    needs: build
    runs-on: ubuntu-latest
    environment: testpypi        # MUST match the environment name you registered on TestPyPI
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      # OIDC upload (no token needed)
      - name: Publish to TestPyPI via OIDC
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          packages-dir: dist

  publish-pypi:
    # Run on release, or on dispatch with target == pypi
    if: github.event_name == 'release' || (github.event_name == 'workflow_dispatch' && inputs.target == 'pypi')
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      # Use token (unless you also set up OIDC for real PyPI)
      - name: Publish to PyPI (token)
        env:
          PYPI_API_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          python -m pip install --upgrade twine
          python -m twine upload -u __token__ -p "$PYPI_API_TOKEN" dist/*
